name: contracts

on: [ push ]

jobs:
  stable:
    name: ${{ matrix.dir }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest]
        dir: [ burner, crypto-verify, cyberpunk, empty, hackatom, ibc2, ibc-callbacks, ibc-reflect, ibc-reflect-send, nested-contracts, queue, reflect, replier, staking, virus ]
    defaults:
      run:
        shell: bash
        working-directory: contracts/${{ matrix.dir }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.82.0
          target: wasm32-unknown-unknown
          components: clippy, rustfmt
          cache-directories: |
            ${{ github.workspace }}/contracts

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run unit tests
        run: cargo test --lib --locked

      - name: Build WASM binary
        run: cargo build --release --lib --locked --target wasm32-unknown-unknown

      - name: Run linter
        run: cargo clippy --all-targets --tests -- -D warnings

      - name: Run integration tests
        run: cargo test --test integration --locked

      - name: Run schema generator
        run: cargo run --bin schema --locked

      - name: Ensure schemas are up-to-date
        run: git diff --quiet ./schema

      - name: Upload WASM binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.dir }}-${{ runner.os }}
          path: ./contracts/${{ matrix.dir }}/target/wasm32-unknown-unknown/release/${{ matrix.dir }}.wasm

  nightly:
    name: ${{ matrix.dir }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        dir: [ floaty ]
    defaults:
      run:
        shell: bash
        working-directory: ./contracts/${{ matrix.dir }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust for compiling contracts
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly-2024-09-01 # This is a nightly channel for version 1.82.0
          target: wasm32-unknown-unknown
          components: clippy, rustfmt
          cache-directories: |
            ${{ github.workspace }}/contracts

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run unit tests
        run: cargo test --lib --locked

      - name: Build WASM binary
        run: RUSTFLAGS="-C target-feature=+nontrapping-fptoint" cargo build --release --lib --locked --target wasm32-unknown-unknown

      - name: Run linter
        run: cargo clippy --all-targets --tests -- -D warnings

      - name: Run integration tests
        run: cargo test --test integration --locked

      - name: Run schema generator
        run: cargo run --bin schema --locked

      - name: Ensure schemas are up-to-date
        run: git diff --quiet ./schema

      - name: Upload WASM binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.dir }}-${{ runner.os }}
          path: ./contracts/${{ matrix.dir }}/target/wasm32-unknown-unknown/release/${{ matrix.dir }}.wasm

  check-released:
    name: check-released-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [stable, nightly]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust for compiling cosmwasm-check
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.87.0

      - name: Install recently released cosmwasm-check
        run: cargo install cosmwasm-check@3.0.1

      - name: Download burner
        uses: actions/download-artifact@v4
        with:
          name: burner-${{ runner.os }}
          path: .

      - name: Check floaty
        run: cosmwasm-check burner.wasm

      - name: Download floaty
        uses: actions/download-artifact@v4
        with:
          name: floaty-${{ runner.os }}
          path: .

      - name: Check floaty
        run: cosmwasm-check floaty.wasm
