// This code is @generated by cw-schema-codegen. Do not modify this manually.

{% if add_package %}
import (
    _ "github.com/cosmos/cosmos-sdk/types/address"
)
{% endif %}
{% if has_unit_variants %}
import (
	"encoding/json"
	"fmt"
)
{% endif %}

{% for variant in variants %}
{% match variant.ty %}
{% when TypeTemplate::Unit %}
type {{ name }}{{ variant.name }} struct{}
{% when TypeTemplate::Tuple(types) %}
type {{ name }}{{ variant.name }} {% if types.len() > 1 %}[]interface{}{% else %}{{ types[0] }}{% endif %}
{% when TypeTemplate::Named { fields } %}
type {{ name }}{{ variant.name }} struct {
    {% for field in fields %}
	{% for doc in docs %}
	// {{ doc }}
	{% endfor %}
	{{ field.name }} {{ field.ty }} `json:"{{ field.rename }}"`
    {% endfor %}
}
{% endmatch %}
{% endfor %}

{% for doc in docs %}
	// {{ doc }}
{% endfor %}
type {{ name }} struct {
{% for variant in variants %}
{% for doc in docs %}
    // {{ doc }}
{% endfor %}
    {{ variant.name }} *{{ name }}{{ variant.name }} `json:"{{ variant.rename }},omitempty"`
{% endfor %}
}
{% if has_unit_variants %}
// UnmarshalJSON implements the json.Unmarshaler interface for {{ name }}.
// {{ name }} contains unit variants, which are represented as strings in the JSON.
func (v *{{ name }}) UnmarshalJSON(data []byte) error {
	var raw struct {
	{% for variant in variants %}
		{{ variant.name }} *{{ name }}{{ variant.name }} `json:"{{ variant.rename }},omitempty"`
	{% endfor %}
	}

	// try to parse directly first
	if err := json.Unmarshal(data, &raw); err != nil {
		// try to parse as string
		var s string
		if err2 := json.Unmarshal(data, &s); err2 != nil {
			return fmt.Errorf("failed to unmarshal {{ name }}: %w, %w", err, err2)
		}

		// check if it's one of the unit variants
		switch s {
		{% for variant in variants %}
		{% if variant.ty.is_unit() %}
		case "{{ variant.rename }}":
			raw.{{ variant.name }} = &{{ name }}{{ variant.name }}{}
		{% endif %}
		{% endfor %}
		default:
			return fmt.Errorf("failed to unmarshal {{ name }}: %w, no matching variant for string %s", err, s)
		}
	}

	// Assign the values to the receiver
	*(*{{ name }})(v) = {{ name }}{
		 {% for variant in variants %}
		    {{ variant.name }}: raw.{{ variant.name }},
   		{% endfor %}
	}

	return nil
}


func (v {{ name }}) MarshalJSON() ([]byte, error) {
	switch {
	{% for variant in variants %}
	{% if variant.ty.is_unit() %}
	case v.{{ variant.name }} != nil:
		return []byte(`"{{ variant.rename }}"`), nil
	{% endif %}
	{% endfor %}
	default:
		return json.Marshal(struct {
			{% for variant in variants %}
				{{ variant.name }} *{{ name }}{{ variant.name }} `json:"{{ variant.rename }},omitempty"`
			{% endfor %}
		}{
			{% for variant in variants %}
				{{ variant.name }}: v.{{ variant.name }},
			{% endfor %}
		})
	}
}
{% endif %}
