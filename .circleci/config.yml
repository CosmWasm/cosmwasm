version: 2.1

orbs:
  go: circleci/go@3.0.2
  python: circleci/python@3.0.0
  rust: circleci/rust@1.7.0
  win: circleci/windows@5.1

commands:
  check_contract:
    parameters:
      min_version:
        type: string
      skip_cosmwasm_check:
        type: boolean
        default: false
    steps:
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Add clippy and rustfmt components
          command: rustup component add clippy rustfmt
      - run:
          name: Check formatting
          command: cargo fmt -- --check
      - run:
          name: Unit tests
          command: cargo unit-test --locked
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - when:
          condition:
            not: << parameters.skip_cosmwasm_check >>
          steps:
            - run:
                name: Run cosmwasm-check (<< parameters.min_version >>)
                command: |
                  # Try installing min_version, but fall back to latest main version.
                  # This allows us to test contracts against the latest cosmwasm-check before releasing it.
                  cargo install cosmwasm-check@~<< parameters.min_version >> --locked --force \
                  || cargo install --path ../../packages/check --locked --force
                  cosmwasm-check --version
                  cosmwasm-check target/wasm32-unknown-unknown/release/*.wasm
      # Run clippy after wasm build to ensure target/wasm32-unknown-unknown/release/<contract>.wasm exists
      - run:
          name: Clippy
          command: cargo clippy --all-targets --tests -- -D warnings
      - run:
          name: Integration tests (singlepass backend)
          command: cargo integration-test --locked --no-default-features
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi

workflows:
  test:
    # Keep those job names in sync with .mergify.yml
    jobs:
      - arm64
      - package_core
      - package_crypto
      - package_check
      - package_schema
      - package_schema_derive
      - package_cw_schema
      - package_cw_schema_codegen
      - package_std
      - package_vm
      - package_vm_derive
      - package_vm_windows
      - contract_burner
      - contract_crypto_verify
      - contract_cyberpunk
      - contract_empty
      - contract_ibc2
      - contract_replier
      # - contract_floaty # This contract needs nightly Rust to compile
      - contract_hackatom
      - contract_ibc_callbacks
      - contract_ibc_reflect
      - contract_ibc_reflect_send
      - contract_nested_contracts
      - contract_queue
      - contract_reflect
      - contract_staking
      - contract_virus
      - fmt
      - fmt_extra
      - clippy:
          matrix:
            parameters:
              # Run with MSRV and some modern stable Rust
              rust-version: ["1.82.0", "1.87.0"]
      - benchmarking:
          requires:
            - package_vm
            - package_crypto
          filters:
            branches:
              only:
                # Long living branches
                - main
                - /^[0-9]+\.[0-9]+$/
                # Add your branch here if benchmarking matters to your work
                - bls12_381
                - secp256r1-support
      - coverage
  deploy:
    jobs:
      - build_and_upload_devcontracts:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/
  cron_jobs:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - deadlinks

jobs:
  arm64:
    machine:
      image: ubuntu-2204:2024.01.1
    resource_class: arm.large
    steps:
      - checkout
      - run:
          name: Install Rust
          command: |
            wget https://static.rust-lang.org/rustup/dist/aarch64-unknown-linux-gnu/rustup-init
            chmod +x rustup-init
            ./rustup-init -y --default-toolchain 1.82 --profile minimal
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - restore_cache:
          keys:
            - v4-arm64-workspace-rust:1.82-{{ checksum "Cargo.lock" }}
            - v4-arm64-workspace-rust:1.82-
      - restore_cache:
          keys:
            - v4-arm64-contracts-rust:1.82-{{ checksum "contracts/crypto-verify/Cargo.lock" }}-{{ checksum "contracts/hackatom/Cargo.lock" }}-{{ checksum "contracts/queue/Cargo.lock" }}-{{ checksum "contracts/reflect/Cargo.lock" }}-{{ checksum "contracts/staking/Cargo.lock" }}
            - v4-arm64-contracts-rust:1.82-
      # Test a few contracts that do something potentially interesting in the VM
      # to test contract execution on ARM64.
      # No need to add all contracts here.
      - run:
          name: "contracts/crypto-verify: integration-test"
          working_directory: ~/project/contracts/crypto-verify
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/hackatom: integration-test"
          working_directory: ~/project/contracts/hackatom
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/ibc2: integration-test"
          working_directory: ~/project/contracts/ibc2
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/queue: integration-test"
          working_directory: ~/project/contracts/queue
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/reflect: integration-test"
          working_directory: ~/project/contracts/reflect
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "contracts/staking: integration-test"
          working_directory: ~/project/contracts/staking
          command: cargo wasm --locked && cargo integration-test --locked
      - run:
          name: "packages/core: test"
          working_directory: ~/project/packages/core
          command: cargo test --all-features --locked
      - run:
          name: "packages/crypto: test"
          working_directory: ~/project/packages/crypto
          command: cargo test --locked
      - run:
          name: "packages/std: test"
          working_directory: ~/project/packages/std
          command: cargo test --locked
      - run:
          name: "packages/vm: test"
          working_directory: ~/project/packages/vm
          # use all features
          command: cargo test --locked --features iterator,staking,stargate,ibc2
      - save_cache:
          key: v4-arm64-workspace-rust:1.82-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
      - save_cache:
          key: v4-arm64-contracts-rust:1.82-{{ checksum "contracts/crypto-verify/Cargo.lock" }}-{{ checksum "contracts/hackatom/Cargo.lock" }}-{{ checksum "contracts/queue/Cargo.lock" }}-{{ checksum "contracts/reflect/Cargo.lock" }}-{{ checksum "contracts/staking/Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            # crypto-verify
            - contracts/crypto-verify/target/debug/.fingerprint
            - contracts/crypto-verify/target/debug/build
            - contracts/crypto-verify/target/debug/deps
            - contracts/crypto-verify/target/wasm32-unknown-unknown/release/.fingerprint
            - contracts/crypto-verify/target/wasm32-unknown-unknown/release/build
            - contracts/crypto-verify/target/wasm32-unknown-unknown/release/deps
            # hackatom
            - contracts/hackatom/target/debug/.fingerprint
            - contracts/hackatom/target/debug/build
            - contracts/hackatom/target/debug/deps
            - contracts/hackatom/target/wasm32-unknown-unknown/release/.fingerprint
            - contracts/hackatom/target/wasm32-unknown-unknown/release/build
            - contracts/hackatom/target/wasm32-unknown-unknown/release/deps
            # ibc2
            - contracts/ibc2/target/debug/.fingerprint
            - contracts/ibc2/target/debug/build
            - contracts/ibc2/target/debug/deps
            - contracts/ibc2/target/wasm32-unknown-unknown/release/.fingerprint
            - contracts/ibc2/target/wasm32-unknown-unknown/release/build
            - contracts/ibc2/target/wasm32-unknown-unknown/release/deps
            # queue
            - contracts/queue/target/debug/.fingerprint
            - contracts/queue/target/debug/build
            - contracts/queue/target/debug/deps
            - contracts/queue/target/wasm32-unknown-unknown/release/.fingerprint
            - contracts/queue/target/wasm32-unknown-unknown/release/build
            - contracts/queue/target/wasm32-unknown-unknown/release/deps
            # reflect
            - contracts/reflect/target/debug/.fingerprint
            - contracts/reflect/target/debug/build
            - contracts/reflect/target/debug/deps
            - contracts/reflect/target/wasm32-unknown-unknown/release/.fingerprint
            - contracts/reflect/target/wasm32-unknown-unknown/release/build
            - contracts/reflect/target/wasm32-unknown-unknown/release/deps
            # staking
            - contracts/staking/target/debug/.fingerprint
            - contracts/staking/target/debug/build
            - contracts/staking/target/debug/deps
            - contracts/staking/target/wasm32-unknown-unknown/release/.fingerprint
            - contracts/staking/target/wasm32-unknown-unknown/release/build
            - contracts/staking/target/wasm32-unknown-unknown/release/deps

  package_core:
    docker:
      - image: rust:1.82
    environment:
      # Limit the number of parallel jobs to avoid OOM crashes during doc testing
      RUST_TEST_THREADS: 8
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_core-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Add thumbv7em-none-eabi target
          command: rustup target add thumbv7em-none-eabi && rustup target list --installed
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build library for native target (no features)
          working_directory: ~/project/packages/core
          command: cargo build --locked --no-default-features
      - run:
          name: Build library for wasm target (no features)
          working_directory: ~/project/packages/core
          command: cargo wasm --locked --no-default-features
      - run:
          name: Build library for no_std target (no features)
          working_directory: ~/project/packages/core
          command: cargo no-std --locked --no-default-features
      - run:
          name: Run unit tests (no features)
          working_directory: ~/project/packages/core
          command: cargo test --locked --no-default-features
      - run:
          name: Build library for native target (all features)
          working_directory: ~/project/packages/core
          command: cargo build --locked --all-features
      - run:
          name: Build library for wasm target (all features)
          working_directory: ~/project/packages/core
          command: cargo wasm --locked --all-features
      - run:
          name: Run unit tests (all features)
          working_directory: ~/project/packages/core
          command: cargo test --locked --all-features
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_core-rust:1.82-{{ checksum "Cargo.lock" }}

  package_crypto:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_crypto-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/crypto
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/crypto
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_crypto-rust:1.82-{{ checksum "Cargo.lock" }}

  package_check:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_check-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/check
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/check
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_check-rust:1.82-{{ checksum "Cargo.lock" }}

  package_schema:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_schema-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/schema
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/schema
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_schema-rust:1.82-{{ checksum "Cargo.lock" }}

  package_schema_derive:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_schema_derive-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/schema-derive
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/schema-derive
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_schema_derive-rust:1.82-{{ checksum "Cargo.lock" }}

  package_cw_schema:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_cw_schema-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/cw-schema
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/cw-schema
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_cw_schema-rust:1.82-{{ checksum "Cargo.lock" }}

  package_cw_schema_codegen:
    executor:
      name: python/default
    steps:
      - checkout
      - rust/install:
          version: "1.86"
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_cw_schema_codegen-rust:1.86-{{ checksum "Cargo.lock" }}
      - go/install:
          version: 1.23.4
      - run:
          name: Install pydantic
          command: pip install pydantic
      - run:
          name: Build
          working_directory: ~/project/packages/cw-schema-codegen
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/cw-schema-codegen
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_cw_schema_codegen-rust:1.86-{{ checksum "Cargo.lock" }}

  package_std:
    docker:
      - image: rust:1.82
    environment:
      # Limit the number of parallel jobs to avoid OOM crashes during doc testing
      RUST_TEST_THREADS: 8
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_std-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build library for native target (no features)
          working_directory: ~/project/packages/std
          command: cargo build --locked --no-default-features --features std
      - run:
          name: Build library for wasm target (no features)
          working_directory: ~/project/packages/std
          command: cargo wasm --locked --no-default-features --features std
      - run:
          name: Run unit tests (no features)
          working_directory: ~/project/packages/std
          command: cargo test --locked --no-default-features --features std
      - run:
          name: Build library for native target (all features)
          working_directory: ~/project/packages/std
          command: cargo build --locked --all-features
      - run:
          name: Build library for wasm target (all features)
          working_directory: ~/project/packages/std
          command: cargo wasm --locked --all-features
      - run:
          name: Run unit tests (all features)
          working_directory: ~/project/packages/std
          command: cargo test --locked --all-features
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_std-rust:1.82-{{ checksum "Cargo.lock" }}

  package_vm:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_vm-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/vm
          command: cargo build --locked
      - run:
          name: Build with all features
          working_directory: ~/project/packages/vm
          command: cargo build --locked --features iterator,staking,stargate
      - run:
          name: Test
          working_directory: ~/project/packages/vm
          command: cargo test --locked
      - run:
          name: Test with all features
          working_directory: ~/project/packages/vm
          command: cargo test --locked --features iterator,staking,stargate
      - run:
          name: Test multi threaded cache
          working_directory: ~/project/packages/vm
          command: |
            cargo build --locked --example multi_threaded_cache
            time ../../target/debug/examples/multi_threaded_cache >/dev/null
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_vm-rust:1.82-{{ checksum "Cargo.lock" }}

  package_vm_derive:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_vm_derive-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/vm-derive
          command: cargo build --locked
      - run:
          name: Test
          working_directory: ~/project/packages/vm-derive
          command: cargo test --locked

      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_vm_derive-rust:1.82-{{ checksum "Cargo.lock" }}

  package_vm_windows:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - run:
          name: Enable symlinks for the checkout
          command: git config --global core.symlinks true
      - checkout
      - run:
          name: Reset git config set by CircleCI to make Cargo work
          command: git config --global --unset url.ssh://git@github.com.insteadof
      - run:
          name: Install Rust
          command: |
            set -o errexit
            curl -sS --output rustup-init.exe https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
            ./rustup-init.exe --default-toolchain 1.82 -y
            echo 'export PATH="$PATH:$USERPROFILE/.cargo/bin"' >> "$BASH_ENV"
            ls $USERPROFILE/.cargo/bin
      - run:
          name: Install gcc
          command: |
            set -o errexit
            choco install -y mingw
            echo 'export PATH="$PATH:/c/ProgramData/mingw64/mingw64/bin"' >> "$BASH_ENV"
      - run:
          name: Version information
          command: |
            set -o errexit
            rustc --version; cargo --version; rustup --version; rustup target list --installed; gcc --version
      - restore_cache:
          keys:
            - cachev3-package_vm_windows-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Test
          working_directory: ~/project/packages/vm
          command: cargo test --locked
      - run:
          name: Test with all features
          working_directory: ~/project/packages/vm
          command: cargo test --locked --features iterator,staking,stargate
      - save_cache:
          paths:
            # ".." is the easiest way to get $HOME here (pwd is $HOME\project)
            - ../.cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cachev3-package_vm_windows-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_burner:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/burner
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_burner-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_burner-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_replier:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/replier
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_replier-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_replier-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_crypto_verify:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/crypto-verify
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_crypto_verify-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_crypto_verify-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_cyberpunk:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/cyberpunk
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_cyberpunk-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_cyberpunk-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_ibc2:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/ibc2
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_ibc2-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_ibc2-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_hackatom:
    docker:
      # We compile this contract with the upper bound to detect issues with new Rust versions early
      - image: rust:1.84.1
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/hackatom
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_hackatom-rust:1.84.1-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_hackatom-rust:1.84.1-{{ checksum "Cargo.lock" }}

  contract_ibc_callbacks:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/ibc-callbacks
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_ibc_callbacks-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_ibc_callbacks-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_ibc_reflect:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/ibc-reflect
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_ibc_reflect-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_ibc_reflect-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_ibc_reflect_send:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/ibc-reflect-send
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_ibc_reflect_send-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_ibc_reflect_send-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_floaty:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/floaty
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_floaty-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_floaty-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_nested_contracts:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/nested-contracts
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_nested_contracts-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_nested_contracts-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_queue:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/queue
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_queue-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_queue-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_reflect:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/reflect
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_reflect-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_reflect-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_staking:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/staking
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_staking-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_staking-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_virus:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/virus
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_virus-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_virus-rust:1.82-{{ checksum "Cargo.lock" }}

  contract_empty:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    working_directory: ~/cosmwasm/contracts/empty
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_empty-rust:1.82-{{ checksum "Cargo.lock" }}
      - check_contract:
          min_version: "3.0"
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_empty-rust:1.82-{{ checksum "Cargo.lock" }}

  fmt:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-fmt-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Add rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Check formatting of workspace
          command: cargo fmt -- --check
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-fmt-rust:1.82-{{ checksum "Cargo.lock" }}

  fmt_extra:
    docker:
      - image: node:20.11.0-bookworm
    steps:
      - checkout
      - run:
          name: Install shfmt
          command: |
            wget -O install_shfmt.sh https://webinstall.dev/shfmt
            bash install_shfmt.sh
      - run:
          name: Validate Markdown files
          command: devtools/format_md.sh -c
      - run:
          name: Validate shell scripts
          command: PATH="/root/.local/bin:$PATH" devtools/format_sh.sh -c
      - run:
          name: Validate YAML files
          command: devtools/format_yml.sh -c

  deadlinks:
    docker:
      - image: rust:1.82
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-deadlinks-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Generate docs
          command: cargo doc
      - run:
          name: Install pip
          command: apt update && apt install -y python3-pip
      - run:
          name: Install dependencies
          command: pip3 install requests bs4 --break-system-packages
      - run:
          name: Check dead links
          command: devtools/deadlinks.py
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - /root/.cache/pip
          key: cargocache-v2-deadlinks-rust:1.82-{{ checksum "Cargo.lock" }}

  clippy:
    parameters:
      rust-version:
        type: string
    docker:
      # In this job we use the latest Rust stable in order to check against the
      # most recent code style recommendations.
      - image: rust:<< parameters.rust-version >>
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version && cargo --version
      - restore_cache:
          keys:
            - v2-clippy-rust:<< parameters.rust-version >>-{{ checksum "Cargo.lock" }}
            - v2-clippy-rust:<< parameters.rust-version >>-
      - run:
          name: Add clippy component
          command: rustup component add clippy
      #
      # Workspace packages
      #
      - run:
          name: Clippy linting on core (no feature flags)
          working_directory: ~/project/packages/core
          command: cargo clippy --all-targets -- -D warnings
      - run:
          name: Clippy linting on core (all feature flags)
          working_directory: ~/project/packages/core
          command: cargo clippy --all-features --all-targets -- -D warnings
      - run:
          name: Clippy linting on crypto
          working_directory: ~/project/packages/crypto
          command: cargo clippy --all-targets --tests -- -D warnings
      - run:
          name: Clippy linting on derive
          working_directory: ~/project/packages/derive
          command: cargo clippy --all-targets --tests -- -D warnings
      - run:
          name: Clippy linting on schema
          working_directory: ~/project/packages/schema
          command: cargo clippy --all-targets --tests -- -D warnings
      - run:
          name: Clippy linting on schema-derive
          working_directory: ~/project/packages/schema-derive
          command: cargo clippy --all-targets --tests -- -D warnings
      - run:
          name: Clippy linting on std (no feature flags)
          working_directory: ~/project/packages/std
          command: cargo clippy --all-targets --tests -- -D warnings
      - run:
          name: Clippy linting on std (all feature flags)
          working_directory: ~/project/packages/std
          command: cargo clippy --all-targets --tests --all-features -- -D warnings
      - run:
          name: Clippy linting on vm (no feature flags)
          working_directory: ~/project/packages/vm
          command: cargo clippy --all-targets --tests --no-default-features -- -D warnings
      - run:
          name: Clippy linting on vm (all feature flags)
          working_directory: ~/project/packages/vm
          command: cargo clippy --all-targets --tests --features iterator,staking,stargate -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            # Workspace
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: v2-clippy-rust:<< parameters.rust-version >>-{{ checksum "Cargo.lock" }}

  benchmarking:
    docker:
      - image: rust:1.82
    environment:
      RUST_BACKTRACE: 1
    steps:
      - checkout
      - run:
          name: Version information (default; stable)
          command: rustc --version && cargo --version
      - restore_cache:
          keys:
            - cargocache-v2-benchmarking-rust:1.82-{{ checksum "Cargo.lock" }}
      - run:
          name: Run vm benchmarks (Singlepass)
          working_directory: ~/project/packages/vm
          command: cargo bench -- --color never --save-baseline singlepass
      - run:
          name: Run crypto benchmarks
          working_directory: ~/project/packages/crypto
          command: cargo bench --features std -- --color never --save-baseline crypto
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/release/.fingerprint
            - target/release/build
            - target/release/deps
          key: cargocache-v2-benchmarking-rust:1.82-{{ checksum "Cargo.lock" }}

  coverage:
    docker:
      - image: rust:1.84.1-alpine3.21
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Install necessary packages
          command: |
            apk update
            # needed for grcov and compiling tests
            apk add --no-cache mold clang curl llvm19-dev clang19-static lcov
      - run:
          name: Install cargo-llvm-cov and cargo-nextest
          command: |
            rustup component add llvm-tools-preview

            # cargo-nextest
            curl -L --proto '=https' --tlsv1.2 -OsSf https://github.com/nextest-rs/nextest/releases/download/cargo-nextest-0.9.92/cargo-nextest-0.9.92-x86_64-unknown-linux-musl.tar.gz
            tar -xzf cargo-nextest-0.9.92-x86_64-unknown-linux-musl.tar.gz
            mv cargo-nextest /usr/local/bin/

            # cargo-llvm-cov
            curl -L --proto '=https' --tlsv1.2 -OsSf https://github.com/taiki-e/cargo-llvm-cov/releases/download/v0.6.16/cargo-llvm-cov-x86_64-unknown-linux-musl.tar.gz
            tar -xzf cargo-llvm-cov-x86_64-unknown-linux-musl.tar.gz
            mv cargo-llvm-cov /usr/local/bin/
      - run:
          name: Install CodeCov CLI
          command: |
            curl -L --proto '=https' --tlsv1.2 -OsSf https://cli.codecov.io/v10.1.1/alpine/codecov
            chmod +x codecov
      - run:
          name: Run tests with coverage
          command: |
            # Generate full coverage report
            cargo llvm-cov nextest --all-features --lcov --output-path lcov.info

            # List of package directories and their flags
            # ToDo: Re-add "core:cosmwasm-core" when enabling core coverage again
            set -- \
              "check:cosmwasm-check" \
              "crypto:cosmwasm-crypto" \
              "derive:cosmwasm-derive" \
              "schema:cosmwasm-schema" \
              "schema-derive:cosmwasm-schema-derive" \
              "std:cosmwasm-std" \
              "vm:cosmwasm-vm" \
              "vm-derive:cosmwasm-vm-derive" \
              "cw-schema:cw-schema" \
              "cw-schema-codegen:cw-schema-codegen"

            # Process each package-flag pair
            for entry in "$@"; do
              dir="${entry%%:*}"
              flag="${entry#*:}"

              echo "Processing directory: $dir with flag: $flag"

              # Extract coverage for specific directory using lcov
              lcov \
                --ignore-errors empty,unused \
                --extract lcov.info "packages/$dir/**/*" \
                --output-file "lcov-$dir.info"

              # Upload filtered report
              ./codecov upload-coverage -t "$CODECOV_TOKEN" \
                --disable-search \
                --git-service github \
                --pr "${CIRCLE_PULL_REQUEST##*/}" \
                --branch "$CIRCLE_BRANCH" \
                --sha "$CIRCLE_SHA1" \
                -f "lcov-$dir.info" \
                -F "$flag"
            done
          environment:
            RUSTFLAGS: "-Clinker=clang -Clink-arg=-fuse-ld=/usr/bin/mold"

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_devcontracts:
    docker:
      # Image from https://github.com/cibuilds/github, based on alpine
      - image: cibuilds/github:0.13
    steps:
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - setup_remote_docker
      - checkout
      - run:
          # We cannot mount local folders, see https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Prepare volume with source code
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v /code --name with_code alpine /bin/true
            # copy a config file into this volume
            docker cp ./Cargo.lock with_code:/code
            docker cp ./Cargo.toml with_code:/code
            docker cp ./contracts with_code:/code
            docker cp ./packages with_code:/code
      - run:
          name: Build development contracts
          command: |
            echo "Building all contracts under ./contracts"
            export GLOBIGNORE="contracts/floaty"
            for contract_dir in contracts/*; do
              if [ -d "$contract_dir" ]; then
                echo "Building '$contract_dir' ..."
                docker run --volumes-from with_code cosmwasm/optimizer:0.16.0 "$contract_dir"
              fi
            done
      - run:
          name: Check development contracts
          command: |
            echo "Checking all contracts under ./artifacts"
            docker run --volumes-from with_code rust:1.82 \
              /bin/bash -e -c 'cd ./code; cargo run --bin cosmwasm-check artifacts/*.wasm'
      - run:
          name: Export development contracts
          command: |
            # copy into host
            docker cp with_code:/code/artifacts .
            cd ./artifacts
            ls -lA .
            # Check checksums
            cat checksums.txt
            sha256sum -c checksums.txt
      - run:
          name: Publish artifacts on GitHub
          command: |
            # This safety measure allows us to run the job until here for testing.
            if [ -z "$CIRCLE_TAG" ]; then
              echo "Not a tag build"
              exit 1
            fi

            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="The release notes are available in [CHANGELOG.md](https://github.com/CosmWasm/cosmwasm/blob/$TAG/CHANGELOG.md). For upgrading contracts also consult [MIGRATING.md](https://github.com/CosmWasm/cosmwasm/blob/$TAG/MIGRATING.md).\n\nAttached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -delete \
              "$TAG" ./artifacts/
