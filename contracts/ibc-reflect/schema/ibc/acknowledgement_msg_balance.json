{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AcknowledgementMsgBalance",
  "description": "A custom acknowledgement type. The success type `T` depends on the PacketMsg variant.\n\nThis could be refactored to use [StdAck] at some point. However, it has a different success variant name (\"ok\" vs. \"result\") and a JSON payload instead of a binary payload.\n\n[StdAck]: https://github.com/CosmWasm/cosmwasm/issues/1512",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "ok"
      ],
      "properties": {
        "ok": {
          "$ref": "#/definitions/BalanceResponse"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BalanceResponse": {
      "description": "This is the success response we send on ack for PacketMsg::Balance. Just acknowledge success or error",
      "type": "object",
      "required": [
        "account",
        "balance"
      ],
      "properties": {
        "account": {
          "type": "string"
        },
        "balance": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
