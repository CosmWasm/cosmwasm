{
  "contract_name": "reflect",
  "contract_version": "0.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "reflect_msg_InstantiateMsg",
        "type": "struct",
        "properties": {}
      }
    ]
  },
  "execute": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "reflect_msg_ExecuteMsg",
        "type": "enum",
        "cases": {
          "change_owner": {
            "type": "named",
            "properties": {
              "owner": {
                "value": 3
              }
            }
          },
          "reflect_msg": {
            "type": "named",
            "properties": {
              "msgs": {
                "value": 27
              }
            }
          },
          "reflect_sub_msg": {
            "type": "named",
            "properties": {
              "msgs": {
                "value": 31
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_CosmosMsg_reflect_msg_CustomMsg_",
        "type": "enum",
        "cases": {
          "any": {
            "description": "`CosmosMsg::Any` replaces the \"stargate message\" â€“ a message wrapped\nin a [protobuf Any](https://protobuf.dev/programming-guides/proto3/#any)\nthat is supported by the chain. It behaves the same as\n`CosmosMsg::Stargate` but has a better name and slightly improved syntax.\n\nThis is feature-gated at compile time with `cosmwasm_2_0` because\na chain running CosmWasm < 2.0 cannot process this.",
            "type": "tuple",
            "items": [
              11
            ]
          },
          "bank": {
            "type": "tuple",
            "items": [
              2
            ]
          },
          "custom": {
            "type": "tuple",
            "items": [
              7
            ]
          },
          "distribution": {
            "type": "tuple",
            "items": [
              10
            ]
          },
          "gov": {
            "type": "tuple",
            "items": [
              22
            ]
          },
          "ibc": {
            "type": "tuple",
            "items": [
              12
            ]
          },
          "staking": {
            "type": "tuple",
            "items": [
              9
            ]
          },
          "stargate": {
            "description": "This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
            "type": "named",
            "properties": {
              "type_url": {
                "value": 3
              },
              "value": {
                "value": 8
              }
            }
          },
          "wasm": {
            "type": "tuple",
            "items": [
              21
            ]
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_BankMsg",
        "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
        "type": "enum",
        "cases": {
          "burn": {
            "description": "This will burn the given coins from the contract's account.\nThere is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper.\nImportant if a contract controls significant token supply that must be retired.",
            "type": "named",
            "properties": {
              "amount": {
                "value": 6
              }
            }
          },
          "send": {
            "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28).\n`from_address` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "amount": {
                "value": 6
              },
              "to_address": {
                "value": 3
              }
            }
          }
        }
      },
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "cosmwasm_std_coin_Coin",
        "type": "struct",
        "properties": {
          "amount": {
            "value": 5
          },
          "denom": {
            "value": 3
          }
        }
      },
      {
        "name": "cosmwasm_std_math_uint256_Uint256",
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding,\nsuch that the full u256 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `new` to create instances out of u128, `from` for other primitive uint types\nor `from_be_bytes` to provide big endian bytes:\n\n```\n# use cosmwasm_std::Uint256;\nlet a = Uint256::new(258u128);\nlet b = Uint256::from(258u16);\nlet c = Uint256::from_be_bytes([\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n]);\nassert_eq!(a, b);\nassert_eq!(a, c);\n```",
        "type": "integer",
        "precision": 256,
        "signed": false
      },
      {
        "name": "alloc::vec::Vec<cosmwasm_std::coin::Coin>",
        "type": "array",
        "items": 4
      },
      {
        "name": "reflect_msg_CustomMsg",
        "description": "CustomMsg is an override of CosmosMsg::Custom to show this works and can be extended in the contract",
        "type": "enum",
        "cases": {
          "debug": {
            "type": "tuple",
            "items": [
              3
            ]
          },
          "raw": {
            "type": "tuple",
            "items": [
              8
            ]
          }
        }
      },
      {
        "name": "cosmwasm_std_binary_Binary",
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "binary"
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_StakingMsg",
        "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
        "type": "enum",
        "cases": {
          "delegate": {
            "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90).\n`delegator_address` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "amount": {
                "value": 4
              },
              "validator": {
                "value": 3
              }
            }
          },
          "redelegate": {
            "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105).\n`delegator_address` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "amount": {
                "value": 4
              },
              "dst_validator": {
                "value": 3
              },
              "src_validator": {
                "value": 3
              }
            }
          },
          "undelegate": {
            "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121).\n`delegator_address` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "amount": {
                "value": 4
              },
              "validator": {
                "value": 3
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_DistributionMsg",
        "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
        "type": "enum",
        "cases": {
          "fund_community_pool": {
            "description": "This is translated to a [[MsgFundCommunityPool](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#LL69C1-L76C2).\n`depositor` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "amount": {
                "description": "The amount to spend",
                "value": 6
              }
            }
          },
          "set_withdraw_address": {
            "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37).\n`delegator_address` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "address": {
                "description": "The `withdraw_address`",
                "value": 3
              }
            }
          },
          "withdraw_delegator_reward": {
            "description": "This is translated to a [MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50).\n`delegator_address` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "validator": {
                "description": "The `validator_address`",
                "value": 3
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_AnyMsg",
        "description": "A message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto).\nThis is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
        "type": "struct",
        "properties": {
          "type_url": {
            "value": 3
          },
          "value": {
            "value": 8
          }
        }
      },
      {
        "name": "cosmwasm_std_ibc_IbcMsg",
        "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts\n(contracts that directly speak the IBC protocol via 6 entry points)",
        "type": "enum",
        "cases": {
          "close_channel": {
            "description": "This will close an existing channel that is owned by this contract.\nPort is auto-assigned to the contract's IBC port",
            "type": "named",
            "properties": {
              "channel_id": {
                "value": 3
              }
            }
          },
          "send_packet": {
            "description": "Sends an IBC packet with given data over the existing channel.\nData should be encoded in a format defined by the channel version,\nand the module on the other side should know how to parse this.",
            "type": "named",
            "properties": {
              "channel_id": {
                "value": 3
              },
              "data": {
                "value": 8
              },
              "timeout": {
                "description": "when packet times out, measured on remote chain",
                "value": 13
              }
            }
          },
          "transfer": {
            "description": "Sends bank tokens owned by the contract to the given address on another chain.\nThe channel must already be established between the ibctransfer module on this chain\nand a matching module on the remote chain.\nWe cannot select the port_id, this is whatever the local chain has bound the ibctransfer\nmodule to.",
            "type": "named",
            "properties": {
              "amount": {
                "description": "packet data only supports one coin\nhttps://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                "value": 4
              },
              "channel_id": {
                "description": "existing channel to send the tokens over",
                "value": 3
              },
              "memo": {
                "description": "An optional memo. See the blog post\n[\"Moving Beyond Simple Token Transfers\"](https://medium.com/the-interchain-foundation/moving-beyond-simple-token-transfers-d42b2b1dc29b)\nfor more information.\n\nThere is no difference between setting this to `None` or an empty string.\n\nThis field is only supported on chains with CosmWasm >= 2.0 and silently\nignored on older chains.\nIf you need support for both 1.x and 2.x chain with the same codebase,\nit is recommended to use `CosmosMsg::Stargate` with a custom MsgTransfer\nprotobuf encoder instead.",
                "value": 19
              },
              "timeout": {
                "description": "when packet times out, measured on remote chain",
                "value": 13
              },
              "to_address": {
                "description": "address on the remote chain to receive these tokens",
                "value": 3
              }
            }
          },
          "write_acknowledgement": {
            "description": "Acknowledges a packet that this contract received over IBC.\nThis allows acknowledging a packet that was not acknowledged yet in the `ibc_packet_receive` call.",
            "type": "named",
            "properties": {
              "ack": {
                "description": "The acknowledgement to send back",
                "value": 20
              },
              "channel_id": {
                "description": "Existing channel where the packet was received",
                "value": 3
              },
              "packet_sequence": {
                "description": "Sequence number of the packet that was received",
                "value": 15
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_ibc_IbcTimeout",
        "description": "In IBC each package must set at least one type of timeout:\nthe timestamp or the block height. Using this rather complex enum instead of\ntwo timeout fields we ensure that at least one timeout is set.",
        "type": "struct",
        "properties": {
          "block": {
            "value": 16
          },
          "timestamp": {
            "value": 18
          }
        }
      },
      {
        "name": "cosmwasm_std_ibc_IbcTimeoutBlock",
        "description": "IBCTimeoutHeight Height is a monotonically increasing data type\nthat can be compared against another Height for the purposes of updating and\nfreezing clients.\nOrdering is (revision_number, timeout_height)",
        "type": "struct",
        "properties": {
          "height": {
            "description": "block height after which the packet times out.\nthe height within the given revision",
            "value": 15
          },
          "revision": {
            "description": "the version that the client is currently on\n(e.g. after resetting the chain this could increment 1 as height drops to 0)",
            "value": 15
          }
        }
      },
      {
        "name": "u64",
        "type": "integer",
        "precision": 64,
        "signed": false
      },
      {
        "name": "core::option::Option<cosmwasm_std::ibc::IbcTimeoutBlock>",
        "type": "optional",
        "inner": 14
      },
      {
        "name": "cosmwasm_std_timestamp_Timestamp",
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n```\n# use cosmwasm_std::Timestamp;\nlet ts = Timestamp::from_nanos(1_000_000_202);\nassert_eq!(ts.nanos(), 1_000_000_202);\nassert_eq!(ts.seconds(), 1);\nassert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2);\nassert_eq!(ts.nanos(), 3_000_000_202);\nassert_eq!(ts.seconds(), 3);\nassert_eq!(ts.subsec_nanos(), 202);\n```",
        "type": "timestamp"
      },
      {
        "name": "core::option::Option<cosmwasm_std::timestamp::Timestamp>",
        "type": "optional",
        "inner": 17
      },
      {
        "name": "core::option::Option<alloc::string::String>",
        "type": "optional",
        "inner": 3
      },
      {
        "name": "cosmwasm_std_ibc_IbcAcknowledgement",
        "type": "struct",
        "properties": {
          "data": {
            "value": 8
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_WasmMsg",
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "type": "enum",
        "cases": {
          "clear_admin": {
            "description": "Clears the admin on the given contract, so no more migration possible.\nFails if this contract is not currently admin of the target contract.",
            "type": "named",
            "properties": {
              "contract_addr": {
                "value": 3
              }
            }
          },
          "execute": {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78).\n`sender` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "contract_addr": {
                "value": 3
              },
              "funds": {
                "value": 6
              },
              "msg": {
                "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                "value": 8
              }
            }
          },
          "instantiate": {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that\nwhen emitting the same Instantiate message multiple times,\nmultiple instances on different addresses will be generated. See also\nInstantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71).\n`sender` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "admin": {
                "value": 19
              },
              "code_id": {
                "value": 15
              },
              "funds": {
                "value": 6
              },
              "label": {
                "description": "A human-readable label for the contract.\n\nValid values should:\n- not be empty\n- not be bigger than 128 bytes (or some chain-specific limit)\n- not start / end with whitespace",
                "value": 3
              },
              "msg": {
                "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                "value": 8
              }
            }
          },
          "instantiate2": {
            "description": "Instantiates a new contracts from previously uploaded Wasm code\nusing a predictable address derivation algorithm implemented in\n[`cosmwasm_std::instantiate2_address`].\n\nThis is translated to a [MsgInstantiateContract2](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L73-L96).\n`sender` is automatically filled with the current contract's address.\n`fix_msg` is automatically set to false.",
            "type": "named",
            "properties": {
              "admin": {
                "value": 19
              },
              "code_id": {
                "value": 15
              },
              "funds": {
                "value": 6
              },
              "label": {
                "description": "A human-readable label for the contract.\n\nValid values should:\n- not be empty\n- not be bigger than 128 bytes (or some chain-specific limit)\n- not start / end with whitespace",
                "value": 3
              },
              "msg": {
                "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                "value": 8
              },
              "salt": {
                "value": 8
              }
            }
          },
          "migrate": {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to\ncustomize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96).\n`sender` is automatically filled with the current contract's address.",
            "type": "named",
            "properties": {
              "contract_addr": {
                "value": 3
              },
              "msg": {
                "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                "value": 8
              },
              "new_code_id": {
                "description": "the code_id of the new logic to place in the given contract",
                "value": 15
              }
            }
          },
          "update_admin": {
            "description": "Sets a new admin (for migrate) on the given contract.\nFails if this contract is not currently admin of the target contract.",
            "type": "named",
            "properties": {
              "admin": {
                "value": 3
              },
              "contract_addr": {
                "value": 3
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_GovMsg",
        "description": "This message type allows the contract interact with the [x/gov] module in order\nto cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n```\n# use cosmwasm_std::{\n#     HexBinary,\n#     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo,\n#     Response, QueryResponse,\n# };\n# type ExecuteMsg = ();\nuse cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point]\npub fn execute(\ndeps: DepsMut,\nenv: Env,\ninfo: MessageInfo,\nmsg: ExecuteMsg,\n) -> Result<Response, StdError> {\n// ...\nOk(Response::new().add_message(GovMsg::Vote {\nproposal_id: 4,\noption: VoteOption::Yes,\n}))\n}\n```\n\nCast a weighted vote:\n\n```\n# use cosmwasm_std::{\n#     HexBinary,\n#     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo,\n#     Response, QueryResponse,\n# };\n# type ExecuteMsg = ();\n# #[cfg(feature = \"cosmwasm_1_2\")]\nuse cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")]\n#[entry_point]\npub fn execute(\ndeps: DepsMut,\nenv: Env,\ninfo: MessageInfo,\nmsg: ExecuteMsg,\n) -> Result<Response, StdError> {\n// ...\nOk(Response::new().add_message(GovMsg::VoteWeighted {\nproposal_id: 4,\noptions: vec![\nWeightedVoteOption {\noption: VoteOption::Yes,\nweight: Decimal::percent(65),\n},\nWeightedVoteOption {\noption: VoteOption::Abstain,\nweight: Decimal::percent(35),\n},\n],\n}))\n}\n```",
        "type": "enum",
        "cases": {
          "vote": {
            "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
            "type": "named",
            "properties": {
              "option": {
                "description": "The vote option.\n\nThis used to be called \"vote\", but was changed for consistency with Cosmos SDK.",
                "value": 23
              },
              "proposal_id": {
                "value": 15
              }
            }
          },
          "vote_weighted": {
            "description": "This maps directly to [MsgVoteWeighted](https://github.com/cosmos/cosmos-sdk/blob/v0.45.8/proto/cosmos/gov/v1beta1/tx.proto#L66-L78) in the Cosmos SDK with voter set to the contract address.",
            "type": "named",
            "properties": {
              "options": {
                "value": 26
              },
              "proposal_id": {
                "value": 15
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_VoteOption",
        "type": "enum",
        "cases": {
          "abstain": {
            "type": "unit"
          },
          "no": {
            "type": "unit"
          },
          "no_with_veto": {
            "type": "unit"
          },
          "yes": {
            "type": "unit"
          }
        }
      },
      {
        "name": "cosmwasm_std_results_cosmos_msg_WeightedVoteOption",
        "type": "struct",
        "properties": {
          "option": {
            "value": 23
          },
          "weight": {
            "value": 25
          }
        }
      },
      {
        "name": "cosmwasm_std_math_decimal_Decimal",
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "decimal",
        "precision": 128,
        "signed": false
      },
      {
        "name": "alloc::vec::Vec<cosmwasm_std::results::cosmos_msg::WeightedVoteOption>",
        "type": "array",
        "items": 24
      },
      {
        "name": "alloc::vec::Vec<cosmwasm_std::results::cosmos_msg::CosmosMsg<reflect::msg::CustomMsg>>",
        "type": "array",
        "items": 1
      },
      {
        "name": "cosmwasm_std_results_submessages_SubMsg_reflect_msg_CustomMsg_",
        "description": "A submessage that will guarantee a `reply` call on success or error, depending on\nthe `reply_on` setting. If you do not need to process the result, use regular messages instead.\n\nNote: On error the submessage execution will revert any partial state changes due to this message,\nbut not revert any state changes in the calling contract. If this is required, it must be done\nmanually in the `reply` entry point.",
        "type": "struct",
        "properties": {
          "gas_limit": {
            "description": "Gas limit measured in [Cosmos SDK gas](https://github.com/CosmWasm/cosmwasm/blob/main/docs/GAS.md).\n\nSetting this to `None` means unlimited. Then the submessage execution can consume all gas of the\ncurrent execution context.",
            "value": 29
          },
          "id": {
            "description": "An arbitrary ID chosen by the contract.\nThis is typically used to match `Reply`s in the `reply` entry point to the submessage.",
            "value": 15
          },
          "msg": {
            "value": 1
          },
          "payload": {
            "defaulting": true,
            "description": "Some arbitrary data that the contract can set in an application specific way.\nThis is just passed into the `reply` entry point and is not stored to state.\nAny encoding can be used. If `id` is used to identify a particular action,\nthe encoding can also be different for each of those actions since you can match `id`\nfirst and then start processing the `payload`.\n\nThe environment restricts the length of this field in order to avoid abuse. The limit\nis environment specific and can change over time. The initial default is 128 KiB.\n\nUnset/nil/null cannot be differentiated from empty data.\n\nOn chains running CosmWasm 1.x this field will be ignored.",
            "value": 8
          },
          "reply_on": {
            "value": 30
          }
        }
      },
      {
        "name": "core::option::Option<u64>",
        "type": "optional",
        "inner": 15
      },
      {
        "name": "cosmwasm_std_results_submessages_ReplyOn",
        "description": "Use this to define when the contract gets a response callback.\nIf you only need it for errors or success you can select just those in order\nto save gas.",
        "type": "enum",
        "cases": {
          "always": {
            "description": "Always perform a callback after SubMsg is processed",
            "type": "unit"
          },
          "error": {
            "description": "Only callback if SubMsg returned an error, no callback on success case",
            "type": "unit"
          },
          "never": {
            "description": "Never make a callback - this is like the original CosmosMsg semantics",
            "type": "unit"
          },
          "success": {
            "description": "Only callback if SubMsg was successful, no callback on error case",
            "type": "unit"
          }
        }
      },
      {
        "name": "alloc::vec::Vec<cosmwasm_std::results::submessages::SubMsg<reflect::msg::CustomMsg>>",
        "type": "array",
        "items": 28
      }
    ]
  },
  "query": {
    "type": "v1",
    "root": 0,
    "definitions": [
      {
        "name": "reflect_msg_QueryMsg",
        "type": "enum",
        "cases": {
          "capitalized": {
            "description": "This will call out to SpecialQuery::Capitalized",
            "type": "named",
            "properties": {
              "text": {
                "value": 1
              }
            }
          },
          "chain": {
            "description": "Queries the blockchain and returns the result untouched",
            "type": "named",
            "properties": {
              "request": {
                "value": 2
              }
            }
          },
          "owner": {
            "type": "named",
            "properties": {}
          },
          "raw": {
            "description": "Queries another contract and returns the data",
            "type": "named",
            "properties": {
              "contract": {
                "value": 1
              },
              "key": {
                "value": 5
              }
            }
          },
          "sub_msg_result": {
            "description": "If there was a previous ReflectSubMsg with this ID, returns cosmwasm_std::Reply",
            "type": "named",
            "properties": {
              "id": {
                "value": 16
              }
            }
          }
        }
      },
      {
        "name": "String",
        "type": "string"
      },
      {
        "name": "cosmwasm_std_query_QueryRequest_reflect_msg_SpecialQuery_",
        "type": "enum",
        "cases": {
          "bank": {
            "type": "tuple",
            "items": [
              3
            ]
          },
          "custom": {
            "type": "tuple",
            "items": [
              10
            ]
          },
          "distribution": {
            "type": "tuple",
            "items": [
              12
            ]
          },
          "grpc": {
            "type": "tuple",
            "items": [
              17
            ]
          },
          "ibc": {
            "type": "tuple",
            "items": [
              13
            ]
          },
          "staking": {
            "type": "tuple",
            "items": [
              11
            ]
          },
          "stargate": {
            "description": "A Stargate query is encoded the same way as abci_query, with path and protobuf encoded request data.\nThe format is defined in [ADR-21](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-021-protobuf-query-encoding.md).\nThe response is protobuf encoded data directly without a JSON response wrapper.\nThe caller is responsible for compiling the proper protobuf definitions for both requests and responses.",
            "type": "named",
            "properties": {
              "data": {
                "description": "this is the expected protobuf message type (not any), binary encoded",
                "value": 5
              },
              "path": {
                "description": "this is the fully qualified service path used for routing,\neg. \"/cosmos_sdk.x.bank.v1.Query/QueryBalance\"",
                "value": 1
              }
            }
          },
          "wasm": {
            "type": "tuple",
            "items": [
              15
            ]
          }
        }
      },
      {
        "name": "cosmwasm_std_query_bank_BankQuery",
        "type": "enum",
        "cases": {
          "all_denom_metadata": {
            "description": "This calls into the native bank module for querying metadata for all bank tokens that have a metadata entry.\nReturn value is AllDenomMetadataResponse",
            "type": "named",
            "properties": {
              "pagination": {
                "value": 9
              }
            }
          },
          "balance": {
            "description": "This calls into the native bank module for one denomination\nReturn value is BalanceResponse",
            "type": "named",
            "properties": {
              "address": {
                "value": 1
              },
              "denom": {
                "value": 1
              }
            }
          },
          "denom_metadata": {
            "description": "This calls into the native bank module for querying metadata for a specific bank token.\nReturn value is DenomMetadataResponse",
            "type": "named",
            "properties": {
              "denom": {
                "value": 1
              }
            }
          },
          "supply": {
            "description": "This calls into the native bank module for querying the total supply of one denomination.\nIt does the same as the SupplyOf call in Cosmos SDK's RPC API.\nReturn value is of type SupplyResponse.",
            "type": "named",
            "properties": {
              "denom": {
                "value": 1
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_pagination_PageRequest",
        "description": "Simplified version of the PageRequest type for pagination from the cosmos-sdk",
        "type": "struct",
        "properties": {
          "key": {
            "value": 6
          },
          "limit": {
            "value": 7
          },
          "reverse": {
            "value": 8
          }
        }
      },
      {
        "name": "cosmwasm_std_binary_Binary",
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "binary"
      },
      {
        "name": "core::option::Option<cosmwasm_std::binary::Binary>",
        "type": "optional",
        "inner": 5
      },
      {
        "name": "u32",
        "type": "integer",
        "precision": 32,
        "signed": false
      },
      {
        "name": "bool",
        "type": "boolean"
      },
      {
        "name": "core::option::Option<cosmwasm_std::pagination::PageRequest>",
        "type": "optional",
        "inner": 4
      },
      {
        "name": "reflect_msg_SpecialQuery",
        "description": "An implementation of QueryRequest::Custom to show this works and can be extended in the contract",
        "type": "enum",
        "cases": {
          "capitalized": {
            "type": "named",
            "properties": {
              "text": {
                "value": 1
              }
            }
          },
          "ping": {
            "type": "named",
            "properties": {}
          }
        }
      },
      {
        "name": "cosmwasm_std_query_staking_StakingQuery",
        "type": "enum",
        "cases": {
          "all_delegations": {
            "description": "AllDelegations will return all delegations by the delegator",
            "type": "named",
            "properties": {
              "delegator": {
                "value": 1
              }
            }
          },
          "all_validators": {
            "description": "Returns all validators in the currently active validator set.\n\nThe query response type is `AllValidatorsResponse`.",
            "type": "named",
            "properties": {}
          },
          "bonded_denom": {
            "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
            "type": "named",
            "properties": {}
          },
          "delegation": {
            "description": "Delegation will return more detailed info on a particular\ndelegation, defined by delegator/validator pair",
            "type": "named",
            "properties": {
              "delegator": {
                "value": 1
              },
              "validator": {
                "value": 1
              }
            }
          },
          "validator": {
            "description": "Returns the validator at the given address. Returns None if the validator is\nnot part of the currently active validator set.\n\nThe query response type is `ValidatorResponse`.",
            "type": "named",
            "properties": {
              "address": {
                "description": "The validator's address (e.g. cosmosvaloper1...)",
                "value": 1
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_query_distribution_DistributionQuery",
        "type": "enum",
        "cases": {
          "delegation_rewards": {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L157-L167>",
            "type": "named",
            "properties": {
              "delegator_address": {
                "value": 1
              },
              "validator_address": {
                "value": 1
              }
            }
          },
          "delegation_total_rewards": {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L180-L187>",
            "type": "named",
            "properties": {
              "delegator_address": {
                "value": 1
              }
            }
          },
          "delegator_validators": {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/b0acf60e6c39f7ab023841841fc0b751a12c13ff/proto/cosmos/distribution/v1beta1/query.proto#L202-L210>",
            "type": "named",
            "properties": {
              "delegator_address": {
                "value": 1
              }
            }
          },
          "delegator_withdraw_address": {
            "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L222-L230>",
            "type": "named",
            "properties": {
              "delegator_address": {
                "value": 1
              }
            }
          }
        }
      },
      {
        "name": "cosmwasm_std_query_ibc_IbcQuery",
        "description": "These are queries to the various IBC modules to see the state of the contract's\nIBC connection.\nMost of these will return errors if the contract is not \"ibc enabled\".",
        "type": "enum",
        "cases": {
          "channel": {
            "description": "Lists all information for a (portID, channelID) pair.\nIf port_id is omitted, it will default to the contract's own channel.\n(To save a PortId{} call)\n\nReturns a `ChannelResponse`.",
            "type": "named",
            "properties": {
              "channel_id": {
                "value": 1
              },
              "port_id": {
                "value": 14
              }
            }
          },
          "port_id": {
            "description": "Gets the Port ID the current contract is bound to.\n\nReturns a `PortIdResponse`.",
            "type": "named",
            "properties": {}
          }
        }
      },
      {
        "name": "core::option::Option<alloc::string::String>",
        "type": "optional",
        "inner": 1
      },
      {
        "name": "cosmwasm_std_query_wasm_WasmQuery",
        "type": "enum",
        "cases": {
          "code_info": {
            "description": "Returns a [`CodeInfoResponse`] with metadata of the code",
            "type": "named",
            "properties": {
              "code_id": {
                "value": 16
              }
            }
          },
          "contract_info": {
            "description": "Returns a [`ContractInfoResponse`] with metadata on the contract from the runtime",
            "type": "named",
            "properties": {
              "contract_addr": {
                "value": 1
              }
            }
          },
          "raw": {
            "description": "this queries the raw kv-store of the contract.\nreturns the raw, unparsed data stored at that key, which may be an empty vector if not present",
            "type": "named",
            "properties": {
              "contract_addr": {
                "value": 1
              },
              "key": {
                "description": "Key is the raw key used in the contracts Storage",
                "value": 5
              }
            }
          },
          "smart": {
            "description": "this queries the public API of another contract at a known address (with known ABI)\nReturn value is whatever the contract returns (caller should know), wrapped in a\nContractResult that is JSON encoded.",
            "type": "named",
            "properties": {
              "contract_addr": {
                "value": 1
              },
              "msg": {
                "description": "msg is the json-encoded QueryMsg struct",
                "value": 5
              }
            }
          }
        }
      },
      {
        "name": "u64",
        "type": "integer",
        "precision": 64,
        "signed": false
      },
      {
        "name": "cosmwasm_std_query_GrpcQuery",
        "description": "Queries the chain using a grpc query.\nThis allows to query information that is not exposed in our API.\nThe chain needs to allowlist the supported queries.\nThe drawback of this query is that you have to handle the protobuf encoding and decoding yourself.\n\nThe returned data is protobuf encoded. The protobuf type depends on the query.\nBecause of this, using it with the [`query`](crate::QuerierWrapper::query) function will result\nin a deserialization error.\nUse [`raw_query`](crate::Querier::raw_query) or [`query_grpc`](crate::QuerierWrapper::query_grpc)\ninstead.\n\nTo find the path, as well as the request and response types,\nyou can query the chain's gRPC endpoint using a tool like\n[grpcurl](https://github.com/fullstorydev/grpcurl).",
        "type": "struct",
        "properties": {
          "data": {
            "description": "The expected protobuf message type (not [Any](https://protobuf.dev/programming-guides/proto3/#any)), binary encoded",
            "value": 5
          },
          "path": {
            "description": "The fully qualified endpoint path used for routing.\nIt follows the format `/service_path/method_name`,\neg. \"/cosmos.authz.v1beta1.Query/Grants\"",
            "value": 1
          }
        }
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "capitalized": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "reflect_msg_CapitalizedResponse",
          "type": "struct",
          "properties": {
            "text": {
              "value": 1
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        }
      ]
    },
    "chain": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "reflect_msg_ChainResponse",
          "type": "struct",
          "properties": {
            "data": {
              "value": 1
            }
          }
        },
        {
          "name": "cosmwasm_std_binary_Binary",
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "binary"
        }
      ]
    },
    "owner": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "reflect_msg_OwnerResponse",
          "type": "struct",
          "properties": {
            "owner": {
              "value": 1
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        }
      ]
    },
    "raw": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "reflect_msg_RawResponse",
          "type": "struct",
          "properties": {
            "data": {
              "description": "The returned value of the raw query. Empty data can be the\nresult of a non-existent key or an empty value. We cannot\ndifferentiate those two cases in cross contract queries.",
              "value": 1
            }
          }
        },
        {
          "name": "cosmwasm_std_binary_Binary",
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "binary"
        }
      ]
    },
    "sub_msg_result": {
      "type": "v1",
      "root": 0,
      "definitions": [
        {
          "name": "cosmwasm_std_results_submessages_Reply",
          "description": "The result object returned to `reply`. We always get the ID from the submessage\nback and then must handle success and error cases ourselves.",
          "type": "struct",
          "properties": {
            "gas_used": {
              "defaulting": true,
              "description": "The amount of gas used by the submessage,\nmeasured in [Cosmos SDK gas](https://github.com/CosmWasm/cosmwasm/blob/main/docs/GAS.md).\n\nThis only contains a useful value on chains running CosmWasm 2.0 or higher.\nOn older chains, this field is always 0.",
              "value": 1
            },
            "id": {
              "description": "The ID that the contract set when emitting the `SubMsg`.\nUse this to identify which submessage triggered the `reply`.",
              "value": 1
            },
            "payload": {
              "defaulting": true,
              "description": "Some arbitrary data that the contract set when emitting the `SubMsg`.\nThis is just passed into the `reply` entry point and is not stored to state.\n\nUnset/nil/null cannot be differentiated from empty data.\n\nOn chains running CosmWasm 1.x this field is never filled.",
              "value": 2
            },
            "result": {
              "value": 3
            }
          }
        },
        {
          "name": "u64",
          "type": "integer",
          "precision": 64,
          "signed": false
        },
        {
          "name": "cosmwasm_std_binary_Binary",
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization\nwith serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>.\nSee also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "binary"
        },
        {
          "name": "cosmwasm_std_results_submessages_SubMsgResult",
          "description": "This is the result type that is returned from a sub message execution.\n\nWe use a custom type here instead of Rust's Result because we want to be able to\ndefine the serialization, which is a public interface. Every language that compiles\nto Wasm and runs in the ComsWasm VM needs to create the same JSON representation.\n\nUntil version 1.0.0-beta5, `ContractResult<SubMsgResponse>` was used instead\nof this type. Once serialized, the two types are the same. However, in the Rust type\nsystem we want different types for clarity and documentation reasons.\n\n# Examples\n\nSuccess:\n\n```\n# use cosmwasm_std::{to_json_string, Binary, Event, SubMsgResponse, SubMsgResult};\n#[allow(deprecated)]\nlet response = SubMsgResponse {\ndata: Some(Binary::from_base64(\"MTIzCg==\").unwrap()),\nevents: vec![Event::new(\"wasm\").add_attribute(\"foo\", \"bar\")],\nmsg_responses: vec![],\n};\nlet result: SubMsgResult = SubMsgResult::Ok(response);\nassert_eq!(\nto_json_string(&result).unwrap(),\nr#\"{\"ok\":{\"events\":[{\"type\":\"wasm\",\"attributes\":[{\"key\":\"foo\",\"value\":\"bar\"}]}],\"data\":\"MTIzCg==\",\"msg_responses\":[]}}\"#,\n);\n```\n\nFailure:\n\n```\n# use cosmwasm_std::{to_json_string, SubMsgResult, Response};\nlet error_msg = String::from(\"Something went wrong\");\nlet result = SubMsgResult::Err(error_msg);\nassert_eq!(to_json_string(&result).unwrap(), r#\"{\"error\":\"Something went wrong\"}\"#);\n```",
          "type": "enum",
          "cases": {
            "error": {
              "description": "An error type that every custom error created by contract developers can be converted to.\nThis could potentially have more structure, but String is the easiest.",
              "type": "tuple",
              "items": [
                6
              ]
            },
            "ok": {
              "type": "tuple",
              "items": [
                4
              ]
            }
          }
        },
        {
          "name": "cosmwasm_std_results_submessages_SubMsgResponse",
          "description": "The information we get back from a successful sub message execution",
          "type": "struct",
          "properties": {
            "data": {
              "value": 10
            },
            "events": {
              "description": "The Cosmos SDK events emitted by the submessage.\n\nThis is only filled if the submessage was itself a [`crate::WasmMsg`].\nThe reason for this is that events are [not part of consensus] and therefore not guaranteed to be deterministic,\nso the VM only returns events of wasm messages, which we know are deterministic.\n\n[not part of consensus]: https://github.com/tendermint/tendermint/blob/eed27addecb339cfaeba8fda774e6ab37cdb3774/spec/abci/abci.md#events",
              "value": 9
            },
            "msg_responses": {
              "defaulting": true,
              "description": "The responses from the messages emitted by the submessage.\nIn most cases, this is equivalent to the Cosmos SDK's [MsgResponses], which usually contains a [single message].\nHowever, wasmd allows chains to translate a single contract message into multiple SDK messages.\nIn that case all the MsgResponses from each are concatenated into this flattened `Vec`.\n\n[MsgResponses]: https://github.com/cosmos/cosmos-sdk/blob/316750cc8cd8b3296fa233f4da2e39cbcdc34517/proto/cosmos/base/abci/v1beta1/abci.proto#L106-L109\n[single message]: https://github.com/cosmos/cosmos-sdk/blob/v0.50.4/baseapp/baseapp.go#L1020-L1023",
              "value": 12
            }
          }
        },
        {
          "name": "cosmwasm_std_results_events_Event",
          "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]),\nwhich then get magically converted to bytes for Tendermint somewhere between\nthe Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events\n[*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
          "type": "struct",
          "properties": {
            "attributes": {
              "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
              "value": 8
            },
            "type": {
              "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
              "value": 6
            }
          }
        },
        {
          "name": "String",
          "type": "string"
        },
        {
          "name": "cosmwasm_std_results_events_Attribute",
          "description": "An key value pair that is used in the context of event attributes in logs",
          "type": "struct",
          "properties": {
            "key": {
              "value": 6
            },
            "value": {
              "value": 6
            }
          }
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::results::events::Attribute>",
          "type": "array",
          "items": 7
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::results::events::Event>",
          "type": "array",
          "items": 5
        },
        {
          "name": "core::option::Option<cosmwasm_std::binary::Binary>",
          "type": "optional",
          "inner": 2
        },
        {
          "name": "cosmwasm_std_results_submessages_MsgResponse",
          "type": "struct",
          "properties": {
            "type_url": {
              "value": 6
            },
            "value": {
              "value": 2
            }
          }
        },
        {
          "name": "alloc::vec::Vec<cosmwasm_std::results::submessages::MsgResponse>",
          "type": "array",
          "items": 11
        }
      ]
    }
  }
}
