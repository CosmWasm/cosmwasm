{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This will call out to SpecialQuery::Capitalized",
      "type": "object",
      "required": [
        "capitalized"
      ],
      "properties": {
        "capitalized": {
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "text": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Queries the blockchain and returns the result untouched",
      "type": "object",
      "required": [
        "chain"
      ],
      "properties": {
        "chain": {
          "type": "object",
          "required": [
            "request"
          ],
          "properties": {
            "request": {
              "$ref": "#/definitions/QueryRequest_for_SpecialQuery"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Queries another contract and returns the data",
      "type": "object",
      "required": [
        "raw"
      ],
      "properties": {
        "raw": {
          "type": "object",
          "required": [
            "contract",
            "key"
          ],
          "properties": {
            "contract": {
              "type": "string"
            },
            "key": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "If there was a previous ReflectSubMsg with this ID, returns cosmwasm_std::Reply",
      "type": "object",
      "required": [
        "sub_msg_result"
      ],
      "properties": {
        "sub_msg_result": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BankQuery": {
      "oneOf": [
        {
          "description": "This calls into the native bank module for querying the total supply of one denomination. It does the same as the SupplyOf call in Cosmos SDK's RPC API. Return value is of type SupplyResponse.",
          "type": "object",
          "required": [
            "supply"
          ],
          "properties": {
            "supply": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for one denomination Return value is BalanceResponse",
          "type": "object",
          "required": [
            "balance"
          ],
          "properties": {
            "balance": {
              "type": "object",
              "required": [
                "address",
                "denom"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for querying metadata for a specific bank token. Return value is DenomMetadataResponse",
          "type": "object",
          "required": [
            "denom_metadata"
          ],
          "properties": {
            "denom_metadata": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for querying metadata for all bank tokens that have a metadata entry. Return value is AllDenomMetadataResponse",
          "type": "object",
          "required": [
            "all_denom_metadata"
          ],
          "properties": {
            "all_denom_metadata": {
              "type": "object",
              "properties": {
                "pagination": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/PageRequest"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "DistributionQuery": {
      "oneOf": [
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L222-L230>",
          "type": "object",
          "required": [
            "delegator_withdraw_address"
          ],
          "properties": {
            "delegator_withdraw_address": {
              "type": "object",
              "required": [
                "delegator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L157-L167>",
          "type": "object",
          "required": [
            "delegation_rewards"
          ],
          "properties": {
            "delegation_rewards": {
              "type": "object",
              "required": [
                "delegator_address",
                "validator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                },
                "validator_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L180-L187>",
          "type": "object",
          "required": [
            "delegation_total_rewards"
          ],
          "properties": {
            "delegation_total_rewards": {
              "type": "object",
              "required": [
                "delegator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/b0acf60e6c39f7ab023841841fc0b751a12c13ff/proto/cosmos/distribution/v1beta1/query.proto#L202-L210>",
          "type": "object",
          "required": [
            "delegator_validators"
          ],
          "properties": {
            "delegator_validators": {
              "type": "object",
              "required": [
                "delegator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "GrpcQuery": {
      "description": "Queries the chain using a grpc query. This allows to query information that is not exposed in our API. The chain needs to allowlist the supported queries. The drawback of this query is that you have to handle the protobuf encoding and decoding yourself.\n\nThe returned data is protobuf encoded. The protobuf type depends on the query. Because of this, using it with the [`query`](crate::QuerierWrapper::query) function will result in a deserialization error. Use [`raw_query`](crate::Querier::raw_query) or [`query_grpc`](crate::QuerierWrapper::query_grpc) instead.\n\nTo find the path, as well as the request and response types, you can query the chain's gRPC endpoint using a tool like [grpcurl](https://github.com/fullstorydev/grpcurl).",
      "type": "object",
      "required": [
        "data",
        "path"
      ],
      "properties": {
        "data": {
          "description": "The expected protobuf message type (not [Any](https://protobuf.dev/programming-guides/proto3/#any)), binary encoded",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "path": {
          "description": "The fully qualified endpoint path used for routing. It follows the format `/service_path/method_name`, eg. \"/cosmos.authz.v1beta1.Query/Grants\"",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "IbcQuery": {
      "description": "These are queries to the various IBC modules to see the state of the contract's IBC connection. Most of these will return errors if the contract is not \"ibc enabled\".",
      "oneOf": [
        {
          "description": "Gets the Port ID the current contract is bound to.\n\nReturns a `PortIdResponse`.",
          "type": "object",
          "required": [
            "port_id"
          ],
          "properties": {
            "port_id": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Lists all information for a (portID, channelID) pair. If port_id is omitted, it will default to the contract's own channel. (To save a PortId{} call)\n\nReturns a `ChannelResponse`.",
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                },
                "port_id": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PageRequest": {
      "description": "Simplified version of the PageRequest type for pagination from the cosmos-sdk",
      "type": "object",
      "required": [
        "limit",
        "reverse"
      ],
      "properties": {
        "key": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "reverse": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "QueryRequest_for_SpecialQuery": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/SpecialQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "distribution"
          ],
          "properties": {
            "distribution": {
              "$ref": "#/definitions/DistributionQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A Stargate query is encoded the same way as abci_query, with path and protobuf encoded request data. The format is defined in [ADR-21](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-021-protobuf-query-encoding.md). The response is protobuf encoded data directly without a JSON response wrapper. The caller is responsible for compiling the proper protobuf definitions for both requests and responses.",
          "deprecated": true,
          "type": "object",
          "required": [
            "stargate"
          ],
          "properties": {
            "stargate": {
              "type": "object",
              "required": [
                "data",
                "path"
              ],
              "properties": {
                "data": {
                  "description": "this is the expected protobuf message type (not any), binary encoded",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "path": {
                  "description": "this is the fully qualified service path used for routing, eg. \"/cosmos_sdk.x.bank.v1.Query/QueryBalance\"",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/IbcQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "grpc"
          ],
          "properties": {
            "grpc": {
              "$ref": "#/definitions/GrpcQuery"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SpecialQuery": {
      "description": "An implementation of QueryRequest::Custom to show this works and can be extended in the contract",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "ping"
          ],
          "properties": {
            "ping": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "capitalized"
          ],
          "properties": {
            "capitalized": {
              "type": "object",
              "required": [
                "text"
              ],
              "properties": {
                "text": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StakingQuery": {
      "oneOf": [
        {
          "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
          "type": "object",
          "required": [
            "bonded_denom"
          ],
          "properties": {
            "bonded_denom": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AllDelegations will return all delegations by the delegator",
          "type": "object",
          "required": [
            "all_delegations"
          ],
          "properties": {
            "all_delegations": {
              "type": "object",
              "required": [
                "delegator"
              ],
              "properties": {
                "delegator": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
          "type": "object",
          "required": [
            "delegation"
          ],
          "properties": {
            "delegation": {
              "type": "object",
              "required": [
                "delegator",
                "validator"
              ],
              "properties": {
                "delegator": {
                  "type": "string"
                },
                "validator": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns all validators in the currently active validator set.\n\nThe query response type is `AllValidatorsResponse`.",
          "type": "object",
          "required": [
            "all_validators"
          ],
          "properties": {
            "all_validators": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns the validator at the given address. Returns None if the validator is not part of the currently active validator set.\n\nThe query response type is `ValidatorResponse`.",
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The validator's address (e.g. cosmosvaloper1...)",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WasmQuery": {
      "oneOf": [
        {
          "description": "this queries the public API of another contract at a known address (with known ABI) Return value is whatever the contract returns (caller should know), wrapped in a ContractResult that is JSON encoded.",
          "type": "object",
          "required": [
            "smart"
          ],
          "properties": {
            "smart": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded QueryMsg struct",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "this queries the raw kv-store of the contract. returns the raw, unparsed data stored at that key, which may be an empty vector if not present",
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "type": "object",
              "required": [
                "contract_addr",
                "key"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "key": {
                  "description": "Key is the raw key used in the contracts Storage",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns a [`ContractInfoResponse`] with metadata on the contract from the runtime",
          "type": "object",
          "required": [
            "contract_info"
          ],
          "properties": {
            "contract_info": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns a [`CodeInfoResponse`] with metadata of the code",
          "type": "object",
          "required": [
            "code_info"
          ],
          "properties": {
            "code_info": {
              "type": "object",
              "required": [
                "code_id"
              ],
              "properties": {
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
