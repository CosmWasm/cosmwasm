{
  "type": "v1",
  "root": 0,
  "definitions": [
    {
      "name": "hackatom_msg_SudoMsg",
      "description": "SudoMsg is only exposed for internal Cosmos SDK modules to call.\nThis is showing how we can expose \"admin\" functionality that can not be called by\nexternal users or contracts, but only trusted (native/Go) code in the blockchain",
      "type": "enum",
      "cases": {
        "steal_funds": {
          "type": "named",
          "properties": {
            "amount": {
              "value": 4
            },
            "recipient": {
              "value": 1
            }
          }
        }
      }
    },
    {
      "name": "String",
      "type": "string"
    },
    {
      "name": "cosmwasm_std_coin_Coin",
      "type": "struct",
      "properties": {
        "amount": {
          "value": 3
        },
        "denom": {
          "value": 1
        }
      }
    },
    {
      "name": "cosmwasm_std_math_uint256_Uint256",
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding,\nsuch that the full u256 range can be used for clients that convert JSON numbers to floats,\nlike JavaScript and jq.\n\n# Examples\n\nUse `new` to create instances out of u128, `from` for other primitive uint types\nor `from_be_bytes` to provide big endian bytes:\n\n```\n# use cosmwasm_std::Uint256;\nlet a = Uint256::new(258u128);\nlet b = Uint256::from(258u16);\nlet c = Uint256::from_be_bytes([\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n]);\nassert_eq!(a, b);\nassert_eq!(a, c);\n```",
      "type": "integer",
      "precision": 256,
      "signed": false
    },
    {
      "name": "alloc::vec::Vec<cosmwasm_std::coin::Coin>",
      "type": "array",
      "items": 2
    }
  ]
}
