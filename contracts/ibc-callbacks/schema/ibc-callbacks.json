{
  "contract_name": "ibc-callbacks",
  "contract_version": "0.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressible in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "anyOf": [
      {
        "type": "object",
        "required": [
          "transfer"
        ],
        "properties": {
          "transfer": {
            "type": "object",
            "required": [
              "channel_id",
              "timeout_seconds",
              "to_address"
            ],
            "properties": {
              "callback_type": {
                "description": "Who should receive callbacks for the message",
                "default": "both",
                "allOf": [
                  {
                    "$ref": "#/definitions/CallbackType"
                  }
                ]
              },
              "channel_id": {
                "description": "The channel to send the packet through",
                "type": "string"
              },
              "timeout_seconds": {
                "description": "The amount of seconds from now the transfer should timeout at",
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "to_address": {
                "description": "Address on the destination chain",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "CallbackType": {
        "type": "string",
        "enum": [
          "src",
          "dst",
          "both"
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "anyOf": [
      {
        "description": "Returns stats about what callbacks have been received",
        "type": "object",
        "required": [
          "callback_stats"
        ],
        "properties": {
          "callback_stats": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "callback_stats": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CallbackStats",
      "description": "A counter for the number of times the respective callback has been called",
      "type": "object",
      "required": [
        "ibc_ack_callbacks",
        "ibc_destination_callbacks",
        "ibc_timeout_callbacks"
      ],
      "properties": {
        "ibc_ack_callbacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IbcAckCallbackMsg"
          }
        },
        "ibc_destination_callbacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IbcDestinationCallbackMsg"
          }
        },
        "ibc_timeout_callbacks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IbcTimeoutCallbackMsg"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "IbcAckCallbackMsg": {
          "type": "object",
          "required": [
            "acknowledgement",
            "original_packet",
            "relayer"
          ],
          "properties": {
            "acknowledgement": {
              "$ref": "#/definitions/IbcAcknowledgement"
            },
            "original_packet": {
              "$ref": "#/definitions/IbcPacket"
            },
            "relayer": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "IbcAcknowledgement": {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        "IbcDestinationCallbackMsg": {
          "description": "The message type of the IBC destination callback.\n\nThe IBC destination callback is needed for cases where someone triggers the sending of an IBC packet through some other message (i.e. not through [`crate::IbcMsg::SendPacket`]) and your contract needs to know that it received this. A prominent example is the [`crate::IbcMsg::Transfer`] message. Without callbacks, you cannot know that someone sent you IBC coins.\n\nIt is important to validate that the packet and acknowledgement are what you expect them to be. For example for a transfer message, the receiver is not necessarily the contract itself.\n\nThe callback is called when the packet is being acknowledged on the destination chain. This happens for both synchronous and asynchronous acknowledgements.\n\nNote that there are some prerequisites that need to be fulfilled to receive destination callbacks: - The contract must implement the `ibc_destination_callback` entrypoint. - The IBC application in the destination chain must have support for the callbacks middleware. - You have to add serialized [`IbcCallbackRequest`] to a specific field of the message. For `IbcMsg::Transfer`, this is the `memo` field and it needs to be json-encoded.",
          "type": "object",
          "required": [
            "ack",
            "packet"
          ],
          "properties": {
            "ack": {
              "$ref": "#/definitions/IbcAcknowledgement"
            },
            "packet": {
              "$ref": "#/definitions/IbcPacket"
            },
            "transfer": {
              "description": "When the underlying packet is a successful transfer message, this field contains information about the transfer. Otherwise it is empty.\n\nThis is always empty on chains using CosmWasm < 3.0",
              "default": null,
              "anyOf": [
                {
                  "$ref": "#/definitions/IbcTransferCallback"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "IbcEndpoint": {
          "type": "object",
          "required": [
            "channel_id",
            "port_id"
          ],
          "properties": {
            "channel_id": {
              "type": "string"
            },
            "port_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "IbcPacket": {
          "type": "object",
          "required": [
            "data",
            "dest",
            "sequence",
            "src",
            "timeout"
          ],
          "properties": {
            "data": {
              "description": "The raw data sent from the other side in the packet",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "dest": {
              "description": "identifies the channel and port on the receiving chain.",
              "allOf": [
                {
                  "$ref": "#/definitions/IbcEndpoint"
                }
              ]
            },
            "sequence": {
              "description": "The sequence number of the packet on the given channel",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "src": {
              "description": "identifies the channel and port on the sending chain.",
              "allOf": [
                {
                  "$ref": "#/definitions/IbcEndpoint"
                }
              ]
            },
            "timeout": {
              "$ref": "#/definitions/IbcTimeout"
            }
          },
          "additionalProperties": false
        },
        "IbcTimeout": {
          "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
          "type": "object",
          "properties": {
            "block": {
              "anyOf": [
                {
                  "$ref": "#/definitions/IbcTimeoutBlock"
                },
                {
                  "type": "null"
                }
              ]
            },
            "timestamp": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "IbcTimeoutBlock": {
          "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
          "type": "object",
          "required": [
            "height",
            "revision"
          ],
          "properties": {
            "height": {
              "description": "block height after which the packet times out. the height within the given revision",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "revision": {
              "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "IbcTimeoutCallbackMsg": {
          "type": "object",
          "required": [
            "packet",
            "relayer"
          ],
          "properties": {
            "packet": {
              "$ref": "#/definitions/IbcPacket"
            },
            "relayer": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "IbcTransferCallback": {
          "type": "object",
          "required": [
            "funds",
            "receiver",
            "sender"
          ],
          "properties": {
            "funds": {
              "description": "The funds that were transferred.\n\nWhen the callback is executed, the transfer is completed already and the coins are now owned by the receiver.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "receiver": {
              "description": "Address of the receiver of the transfer. Since this is on the destination chain, this is a valid address.",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "sender": {
              "description": "Address of the sender of the transfer. Note that this is *not* a valid address on the destination chain.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint256": {
          "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `new` to create instances out of u128, `from` for other primitive uint types or `from_be_bytes` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::new(258u128); let b = Uint256::from(258u16); let c = Uint256::from_be_bytes([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); assert_eq!(a, c); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
